"use strict";(self.webpackChunk_420_w_50_sf=self.webpackChunk_420_w_50_sf||[]).push([[6566],{7924:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Notes de cours/appelsApi","title":"Introduction \xe0 Axios et Architecture API dans React Native","description":"Structure du dossier API","source":"@site/docs/Notes de cours/7-appelsApi.md","sourceDirName":"Notes de cours","slug":"/Notes de cours/appelsApi","permalink":"/420-W50-SF/docs/Notes de cours/appelsApi","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Le Hook useEffect","permalink":"/420-W50-SF/docs/Notes de cours/useEffect"}}');var r=t(4848),i=t(8453);const a={},o="Introduction \xe0 Axios et Architecture API dans React Native",d={},l=[{value:"Structure du dossier API",id:"structure-du-dossier-api",level:2},{value:"1. D\xe9finition des types",id:"1-d\xe9finition-des-types",level:2},{value:"2. Appel \xe0 l&#39;API",id:"2-appel-\xe0-lapi",level:2},{value:"3. Appel de l&#39;API dans l&#39;application",id:"3-appel-de-lapi-dans-lapplication",level:2}];function p(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"introduction-\xe0-axios-et-architecture-api-dans-react-native",children:"Introduction \xe0 Axios et Architecture API dans React Native"})}),"\n",(0,r.jsx)(n.h2,{id:"structure-du-dossier-api",children:"Structure du dossier API"}),"\n",(0,r.jsxs)(n.p,{children:["Pour organiser proprement les appels API et les types, voici une structure recommand\xe9e avec en exemple la mise en place d'un API de ",(0,r.jsx)(n.em,{children:"students"})," :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/api\n\u251c\u2500\u2500 student             --\x3e Dossier th\xe9matique pour l'API des \xe9tudiants (si on a plusieurs routes de base \xe0 g\xe9rer)\n\u2502 \u2514\u2500\u2500 studentApi.ts     --\x3e Fonctions sp\xe9cifiques aux appels li\xe9s aux \xe9tudiants\n/mappers\n\u251c\u2500\u2500 student             --\x3e Dossier th\xe9matique pour le mappage des \xe9tudiants\n\u2502 \u2514\u2500\u2500 studentMapper.ts  --\x3e Fonctions de mappage li\xe9es aux \xe9tudiants\n/types\n\u251c\u2500\u2500 student.ts          --\x3e Types reli\xe9s au student\n"})}),"\n",(0,r.jsx)(n.h2,{id:"1-d\xe9finition-des-types",children:"1. D\xe9finition des types"}),"\n",(0,r.jsxs)(n.p,{children:["La premi\xe8re \xe9tape est ",(0,r.jsx)(n.strong,{children:"d'imp\xe9rativement"})," bien comprendre le format des donn\xe9es dans les appels d'API qui nous int\xe9ressent, ce qui nous permet de construire l'interface de r\xe9ponse avec la bonne sructure :"]}),"\n",(0,r.jsxs)(n.p,{children:["Dans un fichier ",(0,r.jsx)(n.strong,{children:"student.ts"})," dans le dossier ",(0,r.jsx)(n.code,{children:"types"})," (au niveau de l'application) :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"//Format de la r\xe9ponse retourn\xe9 par l'API\nexport interface StudentListResponse {\n  students: {\n    id: string;\n    name: string;\n    email: string;\n    enrolled: boolean;\n  }[];\n  totalCount: number;\n}\n\n//autres interfaces de r\xe9ponse selon l'appel\n//...\n\n//Repr\xe9sentation d'un student dans notre application, si elle diff\xe8re de celle de l'API\nexport interface Student {\n  id: string;\n  fullName: string;\n  emailAddress: string;\n  isEnrolled: boolean;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"})," : On pourrait aussi d\xe9clarer un dossier ",(0,r.jsx)(n.code,{children:"types"})," dans le dossier ",(0,r.jsx)(n.code,{children:"student"})," de l'api pour isoler le type de r\xe9ponse."]}),"\n",(0,r.jsx)(n.h2,{id:"2-appel-\xe0-lapi",children:"2. Appel \xe0 l'API"}),"\n",(0,r.jsxs)(n.p,{children:["Les appels sont regroup\xe9s dans le fichier ",(0,r.jsx)(n.code,{children:"studentApi.ts"}),", ce sont des appels asynchrones (",(0,r.jsx)(n.strong,{children:"await"}),") qui livrent type de r\xe9ponse pr\xe9cis (",(0,r.jsx)(n.strong,{children:"Promise"}),"). Il ne faut pas oublier la gestion d'exception :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { StudentListResponse } from "@/types/student";\n\nconst BASE_URL = //racine de l\'API;\n  async function getStudents(): Promise<StudentListResponse[]> {\n    const response = await fetch(BASE_URL + "/students");\n    if (response.ok) {\n      const json = await response.json();\n      return json as StudentListResponse[];\n    } else {\n      const error = await response.text();\n      throw new Error(error);\n    }\n  };\n'})}),"\n",(0,r.jsxs)(n.p,{children:["L'exemple pr\xe9c\xe9dent fait en sorte que la r\xe9ponse est renvoy\xe9e directement \xe0 l'application, ce qui peut \xeatre tr\xe8s utile pour g\xe9rer la ",(0,r.jsx)(n.strong,{children:"pagination"})," et le ",(0,r.jsx)(n.strong,{children:"total"})," d'\xe9l\xe9ments re\xe7us. Cette approche impose par contre un ",(0,r.jsx)(n.strong,{children:"couplage important"})," entre l'application et l'API ainsi qu'une bonne compr\xe9hension de cette derni\xe8re au niveau applicatif."]}),"\n",(0,r.jsxs)(n.p,{children:["Il est aussi possible de transiger l'objet m\xe9tier (",(0,r.jsx)(n.code,{children:"Student"}),"), ceci n\xe9cessite un mappage au niveau de l'API. Notez la ",(0,r.jsx)(n.strong,{children:"Promise"})," de la m\xe9thode qui a chang\xe9 pour ",(0,r.jsx)(n.code,{children:"Student"}),", le mappage et l'appel \xe0 l'API qui continue \xe9videmment d'attendre sa r\xe9ponse. Notez ici l'utilisation de ",(0,r.jsx)(n.code,{children:"studentMapper"})," d\xe9fini dans la hi\xe9rarchie de l'application :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"//studentMapper.ts\nexport const mapStudentListResponseToStudents = (\n  response: StudentListResponse\n): Student[] => {\n  return response.students.map((s) => ({\n    id: s.id,\n    fullName: s.name,\n    emailAddress: s.email,\n    isEnrolled: s.enrolled,\n  }));\n};\n\n//Autres mappages, ex Student vers ApiStudent dans le cas d'un envoi (post)\n//...\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { StudentListResponse } from "@/types/student";\nimport { mapStudentListResponseToStudents } from "@/mappers/student/studentMapper";\n\nconst BASE_URL = //racine de l\'API;\n\nexport default async function getStudents() : Promise<Student[]>{\n\n    const response = await fetch(BASE_URL + "/students");\n\n    if (!response.ok) {\n        throw new Error("Erreur lors de l\u2019appel \xe0 l\u2019API");\n    }\n\n    const result : StudentListResponse[] = await response.json();\n    return mapStudentListResponseToStudents(result);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"L'exemple pr\xe9c\xe9dent r\xe9duit le couplage entre l'application et l'API (g\xe9r\xe9 dans le mapper), mais nous fait perdre les m\xe9tadonn\xe9es relatives \xe0 la pagination et au total d'\xe9l\xe9ments."}),"\n",(0,r.jsx)(n.p,{children:"Le d\xe9veloppeur a donc la reponsabilit\xe9 de choisir la bonne approche selon le contexte applicatif. Certains vont opter pour l'implantation de 2 appels distincts, subvenant aux 2 situations."}),"\n",(0,r.jsx)(n.h2,{id:"3-appel-de-lapi-dans-lapplication",children:"3. Appel de l'API dans l'application"}),"\n",(0,r.jsxs)(n.p,{children:["Un usage judicieux du ",(0,r.jsx)(n.code,{children:"useEffect"})," et du ",(0,r.jsx)(n.code,{children:"useState"})," rend facile l'appel \xe0 un API. Attention de mettre en place une logique asynchrone pour la r\xe9cup\xe9ration! Comme useEffect est synchrone, il faut utiliser ",(0,r.jsx)(n.code,{children:"then"}),", pas ",(0,r.jsx)(n.code,{children:"await"})," :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const [students, setStudents] = useState<Student[]>([]);\n\n//dans le useEffect, appelle une m\xe9thode de fetching qui ira chercher les \xe9tudiants :\nuseEffect(() => {\n  getStudents().then((data) => {\n    setStudents(data);\n  });\n}, []);\n"})}),"\n",(0,r.jsx)(n.p,{children:"L'ajout d'un \xe9tat de chargement sera \xe0 pr\xe9coniser pour les appels d'API, car un indicateur de chargement est souvent de mise dans ce genre de situation :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const [loading, setLoading] = useState<boolean>(false);\nconst [students, setStudents] = useState<Student[]>([]);\n\n//On g\xe9rera l'\xe9tat de chargement dans la logique de r\xe9cup\xe9ration en n'oubliant pas de le terminer en cas d'erreur !\n"})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);